{"version":3,"sources":["components/MovieCard.js","constants/api.js","components/MovieCardList.js","components/MovieMain.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","vote","movie","poster_path","title","vote_average","overview","className","src","alt","MovieCardList","movies","id","length","map","MovieMain","useState","setMovies","loading","setLoading","error","setError","useEffect","fetch","then","json","moviesList","results","catch","a","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMA8BeA,EAjBG,SAAC,GAAe,IAVdC,EAUCC,EAAY,EAAZA,MACXC,EAA+CD,EAA/CC,YAAaC,EAAkCF,EAAlCE,MAAOC,EAA2BH,EAA3BG,aAAcC,EAAaJ,EAAbI,SAC1C,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKC,ICdY,mCDcGL,EAAaM,IAAKL,IACtC,sBAAKG,UAAU,aAAf,UACE,6BAAKH,IACL,sBAAMG,WAjBMN,EAiBgBI,EAhB9BJ,GAAQ,EACH,QACEA,GAAQ,EACV,SAEA,OAWH,SAA4CI,OAE9C,sBAAKE,UAAU,WAAf,UACE,2CACCD,SERMI,EAbO,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACvB,OACE,mCACE,sBAAMC,GAAG,OAAT,SACGD,EAAOE,QACNF,EAAOG,KAAI,SAACZ,GAAD,OACT,cAAC,EAAD,CAAWA,MAAOA,GAAYA,EAAMU,YC+BjCG,EApCG,WAChB,MAA4BC,mBAAS,IAArC,mBAAOL,EAAP,KAAeM,EAAf,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAiBA,OAfAC,qBAAU,WACRC,MFTF,uHEUKC,MAAK,SAACb,GACL,OAAOA,EAAOc,UAEfD,MAAK,SAACE,GACLT,EAAUS,EAAWC,SACrBR,GAAW,MAEZS,OAAM,SAACR,GACNC,EAAS,wBACTF,GAAW,QAEd,IAECD,EACI,qBAAKX,UAAU,SAAf,qCAGJa,EACK,qBAAKb,UAAU,SAAf,SAAyBa,IAIhC,gCACE,oBAAIb,UAAU,QAAd,+BACA,cAAC,EAAD,CAAesB,EAAE,IAAIlB,OAAQA,QCvBpBmB,EARH,WACV,OACE,qBAAKvB,UAAU,MAAf,SACE,cAAC,EAAD,OCKSwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b0da1a2a.chunk.js","sourcesContent":["import React from \"react\";\nimport { IMGPATH } from \"../constants/api\";\n\nconst imdbRating = (vote) => {\n  if (vote >= 8) {\n    return \"green\";\n  } else if (vote >= 5) {\n    return \"orange\";\n  } else {\n    return \"red\";\n  }\n};\n\nconst MovieCard = ({ movie }) => {\n  const { poster_path, title, vote_average, overview } = movie;\n  return (\n    <div className=\"movie\">\n      <img src={IMGPATH + poster_path} alt={title} />\n      <div className=\"movie-info\">\n        <h3>{title}</h3>\n        <span className={imdbRating(vote_average)}>{vote_average}</span>\n      </div>\n      <div className=\"overview\">\n        <h3>Overview:</h3>\n        {overview}\n      </div>\n    </div>\n  );\n};\n\nexport default MovieCard;\n","export const APIURL =\n  \"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=04c35731a5ee918f014970082a0088b1&page=1\";\n\nexport const IMGPATH = \"https://image.tmdb.org/t/p/w1280\";\n","import React from \"react\";\nimport MovieCard from \"./MovieCard\";\n\nconst MovieCardList = ({ movies }) => {\n  return (\n    <>\n      <main id=\"main\">\n        {movies.length &&\n          movies.map((movie) => (\n            <MovieCard movie={movie} key={movie.id} />\n          ))}\n      </main>\n    </>\n  );\n};\n\nexport default MovieCardList;\n","import React, { useEffect, useState, useLayoutEffect } from \"react\";\nimport MovieCardList from \"./MovieCardList\";\nimport { APIURL } from \"../constants/api\";\n\nconst MovieMain = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch(APIURL)\n      .then((movies) => {\n        return movies.json();\n      })\n      .then((moviesList) => {\n        setMovies(moviesList.results);\n        setLoading(false);\n      })\n      .catch((error) => {\n        setError(\"Something went wrong\");\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) {\n   return <div className=\"loader\">Loading your movies ...</div>;\n  }\n\n  if (error) {\n    return <div className=\"loader\">{error}</div>;\n  }\n\n  return (\n    <div>\n      <h1 className=\"title\">Movie Application</h1>\n      <MovieCardList a=\"a\" movies={movies} />\n    </div>\n  );\n};\n\nexport default MovieMain;\n","import React from \"react\";\nimport \"./App.css\";\nimport MovieMain from \"./components/MovieMain\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <MovieMain />\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}